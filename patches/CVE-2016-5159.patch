diff -Naur openjpeg2-2.1.0.orig/src/lib/openjp2/dwt.c openjpeg2-2.1.0/src/lib/openjp2/dwt.c
--- openjpeg2-2.1.0.orig/src/lib/openjp2/dwt.c	2014-04-29 09:15:02.000000000 +0200
+++ openjpeg2-2.1.0/src/lib/openjp2/dwt.c	2017-01-14 17:33:39.298752651 +0100
@@ -395,7 +395,7 @@
 
 	OPJ_INT32 rw;			/* width of the resolution level computed   */
 	OPJ_INT32 rh;			/* height of the resolution level computed  */
-	OPJ_UINT32 l_data_size;
+	size_t l_data_size;
 
 	opj_tcd_resolution_t * l_cur_res = 0;
 	opj_tcd_resolution_t * l_last_res = 0;
@@ -407,9 +407,15 @@
 	l_cur_res = tilec->resolutions + l;
 	l_last_res = l_cur_res - 1;
 
-	l_data_size = opj_dwt_max_resolution( tilec->resolutions,tilec->numresolutions) * (OPJ_UINT32)sizeof(OPJ_INT32);
-	bj = (OPJ_INT32*)opj_malloc((size_t)l_data_size);
-	if (! bj) {
+	l_data_size = opj_dwt_max_resolution( tilec->resolutions,tilec->numresolutions);
+	/* overflow check */
+	if (l_data_size > (SIZE_MAX / sizeof(OPJ_INT32))) {
+		/* FIXME event manager error callback */
+		return OPJ_FALSE;
+	}
+	l_data_size *= sizeof(OPJ_INT32);
+	bj = (OPJ_INT32*)opj_malloc(l_data_size);
+        if (! bj) {
 		return OPJ_FALSE;
 	}
 	i = l;
@@ -568,6 +574,14 @@
 
 	OPJ_UINT32 w = (OPJ_UINT32)(tilec->x1 - tilec->x0);
 
+	size_t h_mem_size;
+	h_mem_size = opj_dwt_max_resolution(tr, numres);
+	/* overflow check */
+	if (h_mem_size > (SIZE_MAX / sizeof(OPJ_INT32))) {
+		/* FIXME event manager error callback */
+		return OPJ_FALSE;
+	}
+	h_mem_size *= sizeof(OPJ_INT32);
 	h.mem = (OPJ_INT32*)
 	opj_aligned_malloc(opj_dwt_max_resolution(tr, numres) * sizeof(OPJ_INT32));
 	if (! h.mem){
@@ -841,7 +854,21 @@
 
 	OPJ_UINT32 w = (OPJ_UINT32)(tilec->x1 - tilec->x0);
 
-	h.wavelet = (opj_v4_t*) opj_aligned_malloc((opj_dwt_max_resolution(res, numres)+5) * sizeof(opj_v4_t));
+	size_t l_data_size;
+	
+	l_data_size = opj_dwt_max_resolution(res, numres);
+	/* overflow check */
+	if (l_data_size > (SIZE_MAX - 5U)) {
+		/* FIXME event manager error callback */
+		return OPJ_FALSE;
+	}
+	l_data_size += 5U;
+	/* overflow check */
+	if (l_data_size > (SIZE_MAX / sizeof(opj_v4_t))) {
+		/* FIXME event manager error callback */
+		return OPJ_FALSE;
+	}
+	h.wavelet = (opj_v4_t*) opj_aligned_malloc(l_data_size * sizeof(opj_v4_t));
 	v.wavelet = h.wavelet;
 
 	while( --numres) {
diff -Naur openjpeg2-2.1.0.orig/src/lib/openjp2/pi.c openjpeg2-2.1.0/src/lib/openjp2/pi.c
--- openjpeg2-2.1.0.orig/src/lib/openjp2/pi.c	2017-01-14 17:23:21.000000000 +0100
+++ openjpeg2-2.1.0/src/lib/openjp2/pi.c	2017-01-14 17:33:39.302752669 +0100
@@ -1234,14 +1234,14 @@
 
 	/* memory allocation for include */
 	/* prevent an integer overflow issue */
+	/* 0 < l_tcp->numlayers < 65536 c.f. opj_j2k_read_cod in j2k.c */
 	l_current_pi->include = 00;
 	if (l_step_l <= (SIZE_MAX / (l_tcp->numlayers + 1U)))
 	{
 		l_current_pi->include = (OPJ_INT16*) opj_calloc((size_t)(l_tcp->numlayers + 1U) * l_step_l, sizeof(OPJ_INT16));
 	}
 
-	if
-		(!l_current_pi->include)
+	if (!l_current_pi->include)
 	{
 		opj_free(l_tmp_data);
 		opj_free(l_tmp_ptr);
diff -Naur openjpeg2-2.1.0.orig/src/lib/openjp2/t1.c openjpeg2-2.1.0/src/lib/openjp2/t1.c
--- openjpeg2-2.1.0.orig/src/lib/openjp2/t1.c	2014-04-29 09:15:02.000000000 +0200
+++ openjpeg2-2.1.0/src/lib/openjp2/t1.c	2017-01-14 17:32:33.982500247 +0100
@@ -1163,31 +1163,90 @@
 		OPJ_UINT32 w,
 		OPJ_UINT32 h)
 {
-	OPJ_UINT32 datasize=w * h;
-	OPJ_UINT32 flagssize;
+		size_t datasize;
+		
+#if (SIZE_MAX / 0xFFFFFFFFU) < 0xFFFFFFFFU /* UINT32_MAX */
+		/* Overflow check */
+		if ((w > 0U) && ((size_t)h > (SIZE_MAX / (size_t)w))) {
+			/* FIXME event manager error callback */
+			return OPJ_FALSE;
+		}
+#endif
+		datasize = (size_t)w * h;
+
+		/* Overflow check */
+		if (datasize > (SIZE_MAX / sizeof(OPJ_INT32))) {
+			/* FIXME event manager error callback */
+			return OPJ_FALSE;
+		}
 
-	if(datasize > t1->datasize){
+		if(datasize > (size_t)t1->datasize){
 		opj_aligned_free(t1->data);
 		t1->data = (OPJ_INT32*) opj_aligned_malloc(datasize * sizeof(OPJ_INT32));
 		if(!t1->data){
 			return OPJ_FALSE;
 		}
-		t1->datasize=datasize;
+#if SIZE_MAX > 0xFFFFFFFFU /* UINT32_MAX */
+			/* TODO remove this if t1->datasize type changes to size_t */
+			/* Overflow check */
+			if (datasize > (size_t)0xFFFFFFFFU /* UINT32_MAX */) {
+				/* FIXME event manager error callback */
+				return OPJ_FALSE;
+			}
+#endif
+			t1->datasize = (OPJ_UINT32)datasize;
 	}
-	memset(t1->data,0,datasize * sizeof(OPJ_INT32));
+	memset(t1->data, 0, datasize * sizeof(OPJ_INT32));
+
+	{
+		size_t flagssize;
 
-	t1->flags_stride=w+2;
-	flagssize=t1->flags_stride * (h+2);
+		/* Overflow check */
+		if (w > (0xFFFFFFFFU /* UINT32_MAX */ - 2U)) {
+			/* FIXME event manager error callback */
+			return OPJ_FALSE;
+		}
+		t1->flags_stride = w + 2U; /* can't be 0U */
 
-	if(flagssize > t1->flagssize){
-		opj_aligned_free(t1->flags);
-		t1->flags = (opj_flag_t*) opj_aligned_malloc(flagssize * sizeof(opj_flag_t));
-		if(!t1->flags){
+#if (SIZE_MAX - 3U) < 0xFFFFFFFFU /* UINT32_MAX */
+		/* Overflow check */
+		if (h > (0xFFFFFFFFU /* UINT32_MAX */ - 3U)) {
+			/* FIXME event manager error callback */
+			return OPJ_FALSE;
+		}
+#endif
+		flagssize = (size_t)h + 3U;
+		
+		/* Overflow check */
+		if (flagssize > (SIZE_MAX / (size_t)t1->flags_stride)) {
 			return OPJ_FALSE;
 		}
-		t1->flagssize=flagssize;
+		flagssize *= (size_t)t1->flags_stride;
+
+		if(flagssize > (size_t)t1->flagssize){
+			/* Overflow check */
+			if (flagssize > (SIZE_MAX / sizeof(opj_flag_t))) {
+				/* FIXME event manager error callback */
+				return OPJ_FALSE;
+			}
+			opj_aligned_free(t1->flags);
+			t1->flags = (opj_flag_t*) opj_aligned_malloc(flagssize * sizeof(opj_flag_t));
+			if(!t1->flags){
+				/* FIXME event manager error callback */
+				return OPJ_FALSE;
+			}
+#if SIZE_MAX > 0xFFFFFFFFU /* UINT32_MAX */
+			/* TODO remove this if t1->flagssize type changes to size_t */
+			/* Overflow check */
+			if (flagssize > (size_t)0xFFFFFFFFU /* UINT32_MAX */) {
+				/* FIXME event manager error callback */
+				return OPJ_FALSE;
+			}
+#endif
+			t1->flagssize = (OPJ_UINT32)flagssize;
+		}
+		memset(t1->flags, 0, flagssize * sizeof(opj_flag_t));
 	}
-	memset(t1->flags,0,flagssize * sizeof(opj_flag_t));
 
 	t1->w=w;
 	t1->h=h;
